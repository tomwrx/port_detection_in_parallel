import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import os
import warnings

warnings.filterwarnings('ignore')

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")


class PortAnalyticsVisualizer:
    """
    A visualization tool for AIS port detection analysis.
    """

    def __init__(self, results_folder="results"):
        """
        Initialize the visualizer with path to results folder.

        Args:
            results_folder (str): Path to folder containing Excel outputs
        """
        self.results_folder = results_folder
        self.ports_df = None
        self.stops_df = None
        self.load_data()

    def load_data(self):
        """Load the Excel files generated by the port detection system."""
        try:
            ports_file = os.path.join(self.results_folder, "detected_ports_with_polygons.xlsx")
            stops_file = os.path.join(self.results_folder, "clustered_stops.xlsx")

            if os.path.exists(ports_file):
                self.ports_df = pd.read_excel(ports_file)
                print(f"Loaded ports data: {len(self.ports_df)} port clusters")
            else:
                print(f"Warning: {ports_file} not found")

            if os.path.exists(stops_file):
                self.stops_df = pd.read_excel(stops_file)
                print(f"Loaded stops data: {len(self.stops_df)} stop events")
            else:
                print(f"Warning: {stops_file} not found")

        except Exception as e:
            print(f"Error loading data: {e}")

    def create_distribution_analysis(self):
        """Create port size distribution and ship type distribution charts."""
        # Determine subplot layout based on available data
        has_ports = self.ports_df is not None
        has_ships = self.stops_df is not None and 'Ship type' in self.stops_df.columns

        if not has_ports and not has_ships:
            print("No data available for analysis")
            return

        # Create figure with appropriate subplots and extra space for legends
        if has_ports and has_ships:
            fig, axes = plt.subplots(1, 2, figsize=(20, 8))
        elif has_ports or has_ships:
            fig, ax = plt.subplots(1, 1, figsize=(12, 8))
            axes = [ax]  # Make it iterable
            title = 'Port Size Distribution' if has_ports else 'Ship Type Distribution'
            fig.suptitle(title, fontsize=24, fontweight='bold')

        plot_idx = 0

        # 1. Port size distribution
        if has_ports:
            # Classify ports by size based on number of unique ships
            self.ports_df['size_category'] = pd.cut(
                self.ports_df['num_unique_ships'],
                bins=[0, 10, 25, 50, float('inf')],
                labels=['Small (1-10)', 'Medium (11-25)', 'Large (26-50)', 'Major (50+)']
            )

            size_dist = self.ports_df['size_category'].value_counts()
            colors = ['lightblue', 'orange', 'lightgreen', 'red']

            wedges, texts, autotexts = axes[plot_idx].pie(
                size_dist.values,
                autopct='%1.1f%%',
                colors=colors,
                startangle=90,
                textprops={'fontsize': 20},
                pctdistance=0.85
            )

            axes[plot_idx].set_title('Port Distribution by Size\n(Based on Number of Ships)',
                                     fontsize=24, fontweight='bold', pad=20)

            legend_labels = [f'{cat}: {count} ports' for cat, count in size_dist.items()]
            axes[plot_idx].legend(wedges, legend_labels, loc='upper center',
                                  bbox_to_anchor=(0.5, -0.05), ncol=2, fontsize=20)

            plot_idx += 1

        # 2. Ship type distribution
        if has_ships:
            # Filter out noise points and get ship type distribution
            valid_stops = self.stops_df[self.stops_df['cluster'] != -1].copy()

            # Clean ship type data
            valid_stops['Ship type'] = valid_stops['Ship type'].fillna('Unknown')

            # Get top ship types (limit to 8 for readability)
            ship_type_counts = valid_stops['Ship type'].value_counts().head(8)

            colors_ships = plt.cm.Set3(np.linspace(0, 1, len(ship_type_counts)))

            wedges, texts, autotexts = axes[plot_idx].pie(
                ship_type_counts.values,
                autopct='%1.1f%%',
                colors=colors_ships,
                startangle=90,
                textprops={'fontsize': 20},
                pctdistance=0.85
            )

            axes[plot_idx].set_title('Ship Type Distribution\n(Top 8 Types by Stop Events)',
                                     fontsize=22, fontweight='bold', pad=20)

            legend_labels = [f'{ship_type}: {count} stops' for ship_type, count in ship_type_counts.items()]
            axes[plot_idx].legend(wedges, legend_labels, loc='upper center',
                                  bbox_to_anchor=(0.5, -0.05), ncol=2, fontsize=20)

        # Adjust layout to accommodate legends
        plt.subplots_adjust(bottom=0.2)

        # Save the plot
        filename = 'port_and_ship_distribution.png'
        plt.savefig(os.path.join(self.results_folder, filename),
                    dpi=300, bbox_inches='tight')
        print(f"Distribution analysis saved to: {filename}")
        plt.show()

    def generate_summary_report(self):
        """Generate a focused summary report of key distribution findings."""
        if self.ports_df is None and self.stops_df is None:
            print("No data available for summary report")
            return

        report_lines = []
        report_lines.append("=" * 60)
        report_lines.append("PORT & SHIP DISTRIBUTION ANALYSIS SUMMARY")
        report_lines.append("=" * 60)
        report_lines.append(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        report_lines.append("")

        if self.ports_df is not None:
            # Port size distribution
            self.ports_df['size_category'] = pd.cut(
                self.ports_df['num_unique_ships'],
                bins=[0, 10, 25, 50, float('inf')],
                labels=['Small (1-10)', 'Medium (11-25)', 'Large (26-50)', 'Major (50+)']
            )
            size_dist = self.ports_df['size_category'].value_counts()

            report_lines.append("PORT SIZE DISTRIBUTION:")
            report_lines.append(f"  • Total port clusters detected: {len(self.ports_df)}")
            for category, count in size_dist.items():
                percentage = (count / len(self.ports_df)) * 100
                report_lines.append(f"  • {category} ports: {count} ({percentage:.1f}%)")
            report_lines.append("")

        if self.stops_df is not None and 'Ship type' in self.stops_df.columns:
            # Ship type distribution
            valid_stops = self.stops_df[self.stops_df['cluster'] != -1].copy()
            valid_stops['Ship type'] = valid_stops['Ship type'].fillna('Unknown')
            ship_type_counts = valid_stops['Ship type'].value_counts()

            report_lines.append("SHIP TYPE DISTRIBUTION:")
            report_lines.append(f"  • Total stop events analyzed: {len(valid_stops)}")
            report_lines.append(f"  • Number of different ship types: {len(ship_type_counts)}")
            report_lines.append("  • Top 5 ship types:")

            for i, (ship_type, count) in enumerate(ship_type_counts.head(5).items(), 1):
                percentage = (count / len(valid_stops)) * 100
                report_lines.append(f"    {i}. {ship_type}: {count} stops ({percentage:.1f}%)")
            report_lines.append("")

        report_lines.append("=" * 60)

        # Print to console
        for line in report_lines:
            print(line)

        # Save to file
        with open(os.path.join(self.results_folder, 'distribution_summary.txt'), 'w') as f:
            f.write('\n'.join(report_lines))

        print(f"\nSummary report saved to: {os.path.join(self.results_folder, 'distribution_summary.txt')}")

    def run_analysis(self):
        """Run the distribution analysis."""
        print("Starting port and ship distribution analysis...")
        print("-" * 50)

        self.generate_summary_report()
        print("\n" + "=" * 50)

        print("Generating distribution charts...")
        self.create_distribution_analysis()

        print("\nAnalysis complete! Visualizations saved to results folder.")


def main():
    """Main function to run the analytics."""
    # Initialize the visualizer
    analyzer = PortAnalyticsVisualizer()

    # Run analysis
    analyzer.run_analysis()


if __name__ == "__main__":
    main()